<?php

// $Id: job.module,v 1.19.2.9 2014/01/015 02:04:29 lalit774 Exp $

// Copyright Khalid Baheyeldin 2006-2009 http://2bits.com


define('JOB_NODE_TYPE',        'job_node_type_');
define('RESUME_NODE_TYPE',     'resume_node_type_');

define('JOB_EMAIL',            'job_email');

define('JOB_PERM_APPLY', 'apply for jobs');
define('JOB_PERM_WITHDRAW', 'cancel own job applications');
define('JOB_PERM_MANAGE', 'manage job applications');
define('JOB_PERM_REMOVE', 'cancel any job applications');
define('JOB_PERM_FORCE', 'automatically force apply if jobseeker has at least 1 resume');

/**
 * Implementation of hook_help().
 */
function job_help($path, $arg) {
  switch ($path) {
    case 'admin/help#job':
      return t('Allows users to apply for jobs posted.');
  }
}

/**
* Implementation of hook_perm().
*/
function job_permission() {
  return array(
    'apply for jobs' => array(
      'title' => t('Apply for jobs'),
      'description' => t('Access for apply jobs.'),
    ),
    'cancel own job applications' => array(
      'title' => t('Cancel own job applications'),
      'description' => t('Access for cancel own job applications.'),
    ),
     'manage job applications' => array(
      'title' => t('Manage job applications'),
      'description' => t('Access for manage job applications.'),
    ),
    'cancel any job applications' => array(
      'title' => t('Cancel any job applications'),
      'description' => t('Access for cancel any job applications.'),
    ), 
    'automatically force apply if jobseeker has at least 1 resume' => array(
      'title' => t('Force auto job apply with 1 resume'),
      'description' => t('Force jobseekers to auto apply for a job if at least 1 resume exists'),
    ),   
  );  

}

/**
* Implementation of hook_menu().
*/
function job_menu() {
  $items = array();
  $items['admin/config/job'] = array(
	'title' => t('Job'),
	'description' => t('Job settings'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('job_admin_settings'),
	'access arguments' => array('administer site configuration'),
  );
  
  $items['job/apply'] = array(
	'page callback' => 'job_apply',
	'type' => MENU_CALLBACK,
	'access callback' => "_job_perm_apply_node",
	'access arguments' => array(2),
  );
  
  $items['job/clear'] = array(
	'page callback' => 'job_clear',
	'type' => MENU_CALLBACK,
	'access callback' => "_job_perm_clear",
	'access arguments' => array(2,3),
  );
  
  $items['job/applications'] = array(
	'page callback' => 'job_view',
	'title' => t('Job Applications Received'),
	'type' => MENU_SUGGESTED_ITEM,
	'access arguments' => array(JOB_PERM_MANAGE),
  );
  
  $items['job/appliedfor'] = array(
	'page callback' => 'job_post_view',
	'title' => t('Jobs Applied For'),
	'type' => MENU_SUGGESTED_ITEM,
	'access arguments' => array(JOB_PERM_APPLY),
  );
  
  return $items;
}

function _job_perm_clear($nid, $uid) {
  global $user;  
  $node = node_load($nid);
  if (user_access(JOB_PERM_REMOVE) || ($uid && (int) $uid == $user->uid && user_access(JOB_PERM_WITHDRAW))) {
	return true;
  }
  return false;
}


function _job_perm_apply_node($nid) {
  global $user;
  $uid = $user-> uid;
  
  // find who posted the job
  $node = node_load($nid);
  $nuid = $node->uid;

  //&& $nuid != $uid  # comment this condition for testing
  // Can't apply for own job
  if (user_access(JOB_PERM_APPLY)  && !_job_check($node->nid, $uid)) {
	return true;
  }
  
  return false;
}

function job_admin_settings() {
  $set = 'job';
  $form[$set] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable job application for these content types'),
  );

  foreach (node_type_get_types() as $type => $name) {
    $form[$set][JOB_NODE_TYPE . $type] = array(
      '#type' => 'checkbox',
      '#title' => $type,
      '#return_value' => 1,
      '#default_value' => variable_get(JOB_NODE_TYPE . $type, 0),
    );
  }
  
  $form["job_email_files"] = array(
	'#type' => 'checkbox',
	'#title' => t("Include file links in notification emails"),
	'#return_value' => 1,
	'#default_value' => variable_get("job_email_files", 0),
	'#description' => t("Select this option if you want application email notifications to include links directly to resume files"),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_link().
 */
function job_node_view($node, $view_mode) {
  global $user;
  $links = array();
  
  // If not a job node, don't bother
  if (variable_get(JOB_NODE_TYPE . $node->type, 0) == 0) {
    return $links;
  }
  
  if (_job_perm_apply_node($node->nid)) {
	// OK to apply
	$links['node-job-apply'] = array(
	  'title' => t('Apply for this job'),
	  'href' => "job/apply/$node->nid",
	);
  }
  else {
    // Now, determine why the user was denied
    
    if (!$user->uid) {
	  // User is not logged in
	  // NOTE: consider an admin-defined message here
	  $links['node-job-apply'] = array(
	  'title' => t('Please !login or !register to apply',
		array(
		  '!login' => l(t('login'), 'user/login'),
		  '!register' => l(t('register'), 'user/register')
		)),
	  'html' => true,
	  );
    }
    else if (_job_check($node->nid, $user->uid)) {
	  // User has applied for this job
	  // NOTE: consider a link to withdraw application here, if permitted
	  //       - will need to check permission AND status of application
	  //       - if status = 0 , cannot withdraw
	  $links['node-job-apply'] = array(
		'title' => t('You applied for this job'),
	  );
    }
    else {
	  // Catch-all for authenticated users without permissions
	  // NOTE: consider an admin-defined message here
	  // for now, show nothing;
    }
  }
  
  return $node->content['links']['node']['#links']+= $links;
  
  
}
/**
 * Implementation of hook_user_view().
 */

function job_user_view($account){
    if($GLOBALS['user']->uid == $account->uid){
        // User is viewing own account
        if (user_access(JOB_PERM_MANAGE)) {
            
          // Create Job Applications Content
          $account->content['job_applications'] = array( 
            '#type'      => 'user_profile_item',
            '#title'       => t('Job Applications Received'),  
            '#markup'     => l(t('View job applications'), 'job/applications'),
            '#weight'    => 0 
          );    
        }
        
        if (user_access(JOB_PERM_APPLY)) {
          // Create Job Applied For Content
          $account->content['job_applied_for'] = array( 
            '#type'      => 'user_profile_item',
            '#title'       => t('Jobs Applied For'),  
            '#markup'     => l(t('View job postings'), 'job/appliedfor'),
            '#weight'    => 0 
          );    
        }
    }
}

function job_apply() {
  global $user;
  $output ='';
  $job_nid = (int)arg(2);
  $resume_nid = (int)arg(3);
  if (!$user->uid) {
    drupal_set_message(t('Please !login or !register to apply',
      array(
        '!login' => l(t('login'), 'user/login'),
        '!register' => l(t('register'), 'user/register')
      )));
    drupal_goto("node/$nid");
  }

  if (!user_access(JOB_PERM_APPLY)) {
    drupal_set_message(t('You are not authorized to apply for jobs.'));
    drupal_goto("node/$job_nid");
  }

  if (!$job_nid) {
    drupal_set_message(t('No job specified.'));
    drupal_goto("node/$job_nid");
  }

  if ($resume_nid) {
    job_apply_do($job_nid, $resume_nid);
    drupal_goto("node/$job_nid");
  }

  $job = node_load($job_nid);

  $resume_list = job_resume_list($user->uid); 

  if (!$resume_list) {
    foreach (node_type_get_types() as $type => $name) {
      $resume_node = variable_get(RESUME_NODE_TYPE . $type, 0);
      if ($resume_node == 1) {
         $resume_node = $type;
         break;
      }
    }
  
    $msg = t('Please !create to apply', array('!create' => l(t('create a resume'), 'node/add/' . $resume_node)));
    drupal_set_message($msg);
    drupal_goto("node/$job_nid");
  }

  if(user_access(JOB_PERM_FORCE) && count($resume_list) == 1) {
    drupal_goto("job/apply/$job_nid/$resume_nid{$resume_list[0]['nid']}");
  }

  $output .= '<br/>' . t('Position: ') . $job->title . '<br>';
  $output .= '<br/>' . t('Select from your resumes below, or !create',
    array('!create' => l(t('create a new resume'), "node/add")));
  $output .= '<br/>';

  foreach($resume_list as $resume) {
    $view  = l(t('view'),  'node/' . $resume['nid']);
    $apply = l(t('apply'), "job/apply/$job_nid/" . $resume['nid']);
    $edit  = l(t('edit'),  'node/' . $resume['nid'] . '/edit');

    $rows[] = array(
      $resume['title'],
      format_interval(time() - $resume['changed']), 
      $view . ' ' . $apply . ' ' . $edit
      );
  }
  $headers = array(t('Resume Title'), t('Last Changed'), t('Operations'));

 return $output .= theme('table', array('header' => $headers, 'rows' => $rows));
}

function job_resume_list($uid) {
  $resume_types = array();
  foreach(node_type_get_types() as $type => $name) {
    if (variable_get(RESUME_NODE_TYPE . $type, 0)) {
      $resume_types[] = $type;
    }
  }
    $query = db_select('node', 'n');        
    $query->fields('n', array('nid','title','changed'));
    $query->condition('n.type', $resume_types, 'IN');
    $query->condition('n.uid', $uid, '=');     
    $result = $query->execute();
    while($row = $result->fetchAssoc()) {
      $data[] = $row;
    }
    if (isset($data)) {
      return $data;    
    }    
    else return FALSE;
}

function job_apply_do($job_nid, $resume_nid) {
  global $user;

  if (job_user_applied($user->uid, $job_nid)) {
    drupal_set_message(t('You already applied for this position.'));
    drupal_goto("node/$job_nid");
  }

  db_insert('job')
  ->fields(array(
    'nid' => $job_nid,
    'uid' => $user->uid,
    'resume_nid' => $resume_nid,
    'timestamp' => time(),
    'status' => 1
  ))
  ->execute();
  

  job_send_email($job_nid, $resume_nid);

  drupal_set_message(t('Thank you. Your application has been submitted.'));
  drupal_goto("node/$job_nid");
}

function job_user_applied($uid, $job_nid) {
    $query = db_select('job', 'j');
    $query->join('node', 'r', 'j.resume_nid = r.nid');
    $query->join('node', 'n', 'n.nid = r.nid');
    $query->fields('j');
    $query->condition('n.uid', $uid, '=');
    $query->condition('j.nid', $job_nid, '=');
    $query->countQuery();
    $result = $query->execute();
    if($result->fetchField()){
       return TRUE;
    }
    else{
       return FALSE;
    }
}

function job_clear($nid, $uid) {
  if ($nid && $uid) {
    if (strcmp($uid, 'all') == 0) {
        db_update('job') 
        ->fields(array(
        'status' => 0,
        ))
        ->condition('nid', $nid, '=')
        ->execute();
          
	  drupal_set_message(t('All job applications for #@nid have been cleared.', array('@nid' => $nid)));
    }
    else {
        db_update('job') 
        ->fields(array(
        'status' => 0,
        ))
        ->condition('nid', $nid, '=')
        ->condition('uid', $uid, '=')        
        ->execute();
	  drupal_set_message(t('Job application #@nid has been cleared.', array('@nid' => $nid)));
    }
  }
  if (user_access(JOB_PERM_MANAGE)) {
    drupal_goto('job/applications');
  }
  else {
    drupal_goto('job/appliedfor');
  }
}

function job_view() {
  global $user;
  $job_list = job_get_list($user->uid);
  return theme('job_view', array('list' => $job_list));
  //print theme('page', theme('job_view', job_get_list($user->uid)));
}

function job_get_list($uid = NULL) {
    $rows = array();
    $query = db_select('node', 'n');
    $query->innerjoin('job', 'j', 'n.nid = j.nid');
    $query->fields('j', array('uid','resume_nid','timestamp'));
    $query->fields('n', array('nid'));
    $query->condition('n.uid', $uid, '=');
    $query->condition('j.status', 1, '=');
    $query->orderBy('j.timestamp', 'ASC');
    $result = $query->execute();
    
  while ($data = $result->fetchAssoc()) {
    $resume = node_load($data['resume_nid']);
    $job    = node_load($data['nid']);
    $rows[] = array(
      'applicant'     => user_load($data['uid']),
      'resume'        => $resume,
      'job'           => $job,
      'timestamp'     => $data['timestamp'],
      );
  }
  return $rows;
}

function job_post_view() {
  global $user;
  $job_post_list = job_get_post_list($user->uid);
  return theme('job_post_view', array('list' => $job_post_list));
}

function job_get_post_list($uid = NULL) {
  $rows = array();
    $query = db_select('node', 'n');
    $query->innerjoin('job', 'j', 'n.nid = j.nid');
    $query->fields('n', array('nid', 'uid'));
    $query->fields('j', array('uid','resume_nid','timestamp'));
    $query->condition('j.uid', $uid, '=');
    $query->condition('j.status', 1, '=');
    $query->orderBy('j.timestamp', 'ASC');
    $result = $query->execute();

    while ($data = $result->fetchAssoc()) {
    $resume = node_load($data['resume_nid']);
    $job    = node_load($data['nid']);
    $rows[] = array(
      'poster'        => user_load($data['uid']),
      'resume'        => $resume,
      'job'           => $job,
      'timestamp'     => $data['timestamp'],
      'applicant'     => user_load($data['j_uid']),
      );
  }
  return $rows;
}


function theme_job_view($variables) {
  $rows = array();
  $header = array(t('Job'), t('Applicant'), t('Resume'), t('Date'), t('Operations'));
  if (count($variables['list'])) {
    foreach($variables['list'] as $data) {
      $applicant = $data['applicant'];
      $resume    = $data['resume'];
      $job       = $data['job'];
      $title     = l($job->title, "node/$job->nid");
      $resume    = l($resume->title, "node/" . $resume->nid);
      $user      = l($applicant->name, "user/$applicant->uid");
      $ops       = l(t('Clear'), "job/clear/$job->nid/" . $applicant->uid);
      $timestamp = format_date($data['timestamp'], 'custom', 'Y-m-d H:i');

      $rows[] = array(
        'data' => array_merge(
          array($title),
          array($user),
          array($resume),
          array($timestamp),
          array($ops)
          )
        );
    }
  }
  else {
    $rows[] = array('data' => array(t('No job applications.')));
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}


/**
 * Implemetation of hook_theme().
 *
 */
function job_theme() {
  return array(
    'job_view' => array(
      'list' => array(),  
    ),
    'job_post_view' => array(
        'list' => array(),
     ),    
    'job_mail' => array(
        'job_node' => NULL,
        'job_user' => NULL,
        'resume_node' => NULL,
        'resume_user' => NULL,
    ),
    'job_search_item' => array(
        'item' => NULL,
    ),
  );
} 


function theme_job_post_view($variables) {
  $rows = array();
  $header = array(t('Poster'), t('Job'), t('Resume'), t('Date'), t('Operations'));
  if (count($variables['list'])) {
    foreach($variables['list'] as $data) {
      $poster    = $data['poster'];
      $applicant = $data['applicant'];
      $resume    = $data['resume'];
      $job       = $data['job'];

      $title     = l($job->title, "node/$job->nid");
      $resume    = l($resume->title, "node/" . $resume->nid);
      $user      = l($poster->name, "user/$poster->uid");
      $ops       = l(t('Clear'), "job/clear/$job->nid/" . $applicant->uid);
      $timestamp = format_date($data['timestamp'], 'custom', 'Y-m-d H:i');

      $rows[] = array(
        'data' => array_merge(
          array($user),
          array($title),
          array($resume),
          array($timestamp),
          array($ops)
          )
        );
    }
  }
  else {
    $rows[] = array('data' => array(t('No jobs applied for.')));
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}


/**
 * Implementation of hook_node_delete().
 */

function job_node_delete($node) {
  db_delete('job')->condition('nid', $node->nid)->execute();
}


function _job_check($nid, $uid) {
   $result = db_select('job', 'j')
    ->fields('j')
    ->condition('j.nid', $nid, '=')
    ->condition('j.uid', $uid, '=')      
    ->countQuery()
    ->execute();
  if($result->fetchField()){
       return TRUE;
  }else{
       return FALSE;
  }
}

/**
 * Implementation of hook_mail().
 */
function job_mail($key, &$message, $params) {
  $result = theme('job_mail', array('job_node' => $params['job_node'], 'job_user' => $params['job_user'], 'resume_node' => $params['resume_node'], 'resume_user' => $params['resume_user']));
  $message['subject'] = $result['subject'];
  $message['body'][] = $result['body'];
}

function job_send_email($job_nid, $resume_nid) {
  global $user;

  $params['job_node']    = $job_node = node_load($job_nid);
  $params['job_user']    = $job_user = user_load($job_node->uid);
  $params['resume_node'] = $resume_node = node_load($resume_nid);
  $params['resume_user'] = $resume_user = user_load($resume_node->uid);

  $from = $resume_user->mail;
  $language = user_preferred_language($user);
  drupal_mail('job', 'job_apply', $job_user->mail, $language, $params, $from);

  watchdog('job', t("%name applied for job $job_node->nid.",
    array('%name' => theme('placeholder', $resume_user->name . " <$from>"))));
}

function theme_job_mail($variable) {
  //global $base_url;
  
  $site = variable_get('site_name', 'drupal site');
  $subject = t("[$site] [Job application] for [{$variable['job_node']->title}] by [{$variable['resume_user']->name}]");
  $body  = t("The following user has applied for the above job.\n");
  $body .= t("\nJob: @title",                          array('@title'  => $variable['job_node']->title));
  $body .= t("\nJob URL: @url",                        array('@url'    => url("node/{$variable['job_node']->nid}", array('absolute' => TRUE))));
  $body .= t("\nApplicant name: @name",                array('@name'   => $variable['resume_user']->name));
  $body .= t("\nApplicant email: @email",              array('@email'  => $variable['resume_user']->mail));
  $body .= t("\nApplicant URL: @url",                  array('@url'    => url("user/{$variable['resume_user']->uid}", array('absolute' => TRUE))));
  $body .= t("\nResume: @title",                       array('@title'  => $variable['resume_node']->title));
  $body .= t("\nResume URL: @url",                     array('@url'    => url("node/{$variable['resume_node']->nid}", array('absolute' => TRUE))));
  
  // send link to files, if attached
  if (variable_get("job_email_files", 0)) {
    $file_links = array();
    
    // first, try to include files from any filefields
    if (module_exists('filefield') && $fields = filefield_get_field_list($variable['resume_node']->type)) {
      foreach ($fields as $field) {
        $files = $variable['resume_node']->$field['field_name'];
        foreach ($files as $file) {
          $file_links[] = url($file['filepath'], array('absolute' => TRUE));
        }
      }
    }
    
    // next, check for file attachments from the core upload.module
    if (isset($variable['resume_node']->files) && is_array($variable['resume_node']->files) && count($variable['resume_node']->files)) {   
	  foreach ($variable['resume_node']->files as $file_obj) {
		// if this file is not "listed", skip it
		if (empty($file_obj->list)) {
		  continue;
		}
		
		// NOTE: for an HTML email, uncomment the following line and comment out the latter instead
		//$file_links[] = l($file_obj->description, $base_url . url($file_obj->filepath));
		$file_links[] = url($file_obj->filepath, array('absolute' => TRUE));
	  }
    }

    if (count($file_links)) {
	  $body .= t("\n\nResume file(s):\n"). implode($file_links, "/n");
    }
  }
  
  $body .= t("\n\nManage job applications at @manage", array('@manage' => url("job/applications", array('absolute' => TRUE))));

  return(array(
    'subject' => $subject,
    'body'    => $body,
    ));
}

function job_search_item($item) {
  return theme('job_search_item', $item);
}

function theme_job_search_item($item) {
  $output .= '<div id="job_search">';
  $output .= l($item['title'], $item['link']) . '<br />';
  $output .= $item['snippet']. '<br />';
  $output .= $item['user'] . ' | ' . format_date($item['date'], 'small'). '<br /><br />';
  $output .= '</div>';

  return $output ;
}

/**
 * Implementation of hook_views_api().
 */
function job_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'job') .'/views',
  );
}



